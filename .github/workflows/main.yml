name: Haskell CI

on:
  push:
    branches: [ 'main', 'ci', 'ci-uc' ]
  pull_request:
    branches: [ 'main' ]
  release:
    types:
      - created
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:  [ 'ubuntu-latest', 'macOS-latest' ]
        ghc: [ '9.6' ]
        ghc_opt: [ '-O0', '-O2' ]
        include:
          - os: ubuntu-latest
            arch: amd64
            osname: linux
          - os: macOS-latest
            arch: arm64
            osname: mac

    env:
      cache-name: cabal-ghc
      build-targets: --disable-benchmarks all:libs all:exes all:tests

    steps:
    - run: git config --global core.autocrlf false

    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: latest

    - name: Hackage index, Cache Key
      id: params
      shell: bash
      run: |
        ghc_version=$(ghc --numeric-version)
        cabal v2-update
        echo "cache=${{ runner.os }}-build-${{ env.cache-name }}-${ghc_version}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}" > "$GITHUB_OUTPUT"
        echo "ghc_version=$ghc_version" >> "$GITHUB_OUTPUT"

#    - name: Restore Cache
#      uses: actions/cache/restore@v4
#      if: ${{ github.ref_name != 'ci-uc' }}
#      with:
#        path: ~/.cabal
#        key: ${{ steps.params.outputs.cache }}

    - name: Install doctest
      id: doctest-dep
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        if cabal v2-install --offline --overwrite-policy=always doctest
        then
          echo "installed=false" >> "$GITHUB_OUTPUT"
        else
          cabal v2-install doctest --overwrite-policy=always
          echo "installed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Install dependencies
      id: inst-dep
      shell: bash
      run: |
        if cabal v2-build --offline --only-dependencies ${{ env.build-targets }} ${{ matrix.ghc_opt }}
        then
          echo "installed=false" >> "$GITHUB_OUTPUT"
        else
          cabal v2-build --only-dependencies ${{ env.build-targets }} ${{ matrix.ghc_opt }}
          echo "installed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Save Cache
      uses: actions/cache/save@v4
      if: ${{ steps.inst-dep.outputs.installed == 'true' || steps.doctest-dep.outputs.installed == 'true' }}
      with:
        path: ~/.cabal
        key: ${{ steps.params.outputs.cache }}

    - name: Build
      run: |
        cabal v2-build ${{ env.build-targets }} ${{ matrix.ghc_opt }}

    - name: Run tests
      run: env DISABLE_V6_NS=1 cabal v2-test --test-show-details=streaming all:tests

    - name: Run doctest
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        for package in $(cat cabal.project | sed 's/packages://g' | sed 's/dnsext-bowline//g')
        do
          env DISABLE_V6_NS=1 cabal v2-repl --with-ghc=doctest $package
        done
        env   DISABLE_V6_NS=1 cabal v2-repl --with-ghc=doctest dnsext-bowline:bowline

    - name: Install
      if: matrix.ghc == '9.6'
      run: |
        mkdir dist
        for name in bowline dug ; do
          cp -L $(cabal list-bin ./dnsext-bowline:$name ${{ matrix.ghc_opt }}) dist/$name-${{ matrix.osname }}-${{ matrix.arch }}
          strip dist/$name-${{ matrix.osname }}-${{ matrix.arch }}
          ls -l dist/$name-${{ matrix.osname }}-${{ matrix.arch }}
        done
#    - name: Upload artifact
#      if: matrix.ghc == '9.6'
#      uses: actions/upload-artifact@v4
#      with:
#        path: |
#          dist/*
#        name: dnsext-bowline-${{ runner.os }}-${{ runner.arch }}
    - name: Github Releases
      if: gitHub.event_name == 'release' && matrix.ghc == '9.6'
      uses: softprops/action-gh-release@v2
      with:
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          dist/*
    - name: Homebrew-checksum
      id: checksum
      if: gitHub.event_name == 'release' && matrix.ghc == '9.6'
      run: |
        echo "::set-output name=sha256::$(sha256sum dist/dug-mac-arm64 | awk '{print $1}')"
    - name: Homebrew-version
      id: version
      if: gitHub.event_name == 'release' && matrix.ghc == '9.6'
      run: |
        echo ::set-output name=version::${{ github.ref_name }}
    - name: trigger Homebrew formulae update
      uses: peter-evans/repository-dispatch@v1
      if: gitHub.event_name == 'release' && matrix.ghc == '9.6' && runner.os == 'macOS'
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        repository: thehajime/homebrew-tap
        event-type: update-brew
        client-payload: '{ "url": "${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/dug-mac-arm64", "sha256": "${{ steps.checksum.outputs.sha256 }}", "version": "${{ steps.version.outputs.version }}" }'
